buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'de.huxhorn.gradle:de.huxhorn.gradle.pgp-plugin:0.0.4'
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'

repositories {
    mavenCentral()
}

dependencies {
    compile     'com.opencsv:opencsv:4.6'
    compileOnly 'org.codehaus.groovy:groovy-all:2.5.8'
    testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'
    testCompile 'cglib:cglib-nodep:2.2'
    testCompile 'org.objenesis:objenesis:1.2'
}

version = '1.4-SNAPSHOT'
group = 'com.xlson.groovycsv'

sourceSets {
    main.groovy.srcDirs = ['src']
    test.groovy.srcDirs = ['test']
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    archiveClassifier.set('javadoc')
    from 'build/docs/groovydoc'
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives groovydocJar, sourcesJar
}

if (isSetupForDeployToMavenCentral()) {
    signing {
        sign configurations.archives
    }
}

task downloadDeps {
    doLast {
        def libDir = file('lib')
        ant.delete(dir: libDir)
        copy {
            from configurations.testRuntime
            into libDir
        }
    }
}


def isSetupForDeployToMavenCentral() {
    def requiredProperties = ['ossrhUsername',
                              'ossrhPassword',
                              'signing.keyId',
                              'signing.password',
                              'signing.secretKeyRingFile']
    for (prop in requiredProperties) {
        if (!project.hasProperty(prop)) {
            return false
        }
    }
    return true
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            if (isSetupForDeployToMavenCentral()) {
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            pom.project {
                name 'GroovyCSV'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Library for parsing csv in Groovy'
                url 'http://github.com/xlson/groovycsv'
                inceptionYear '2010'

                scm {
                    connection 'scm:git:git@github.com:xlson/groovycsv.git'
                    developerConnection 'scm:git:git@github.com:xlson/groovycsv.git'
                    url 'http://github.com/xlson/groovycsv'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'xlson'
                        name 'Leonard Gram'
                        email 'leo@xlson.com'
                        url 'http://xlson.com/'
                        timezone '+1'
                    }
                }
            }

            pom.withXml { XmlProvider xmlProvider ->
                def xml = xmlProvider.asString()
                def pomXml = new XmlParser().parseText(xml.toString())

                pomXml.version[0] + { packaging('jar') }

                def newXml = new StringWriter()
                def printer = new XmlNodePrinter(new PrintWriter(newXml))
                printer.preserveWhitespace = true
                printer.print(pomXml)
                xml.setLength(0)
                xml.append(newXml.toString())
            }
        }
    }
}
